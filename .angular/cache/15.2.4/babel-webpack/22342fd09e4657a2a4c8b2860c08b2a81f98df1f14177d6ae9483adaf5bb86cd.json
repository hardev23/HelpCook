{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/**\r\n * Servicio que proporciona acceso a la API REST utilizando el HttpClient de Angular\r\n *\r\n * Utilizado para las consultas de recetas.\r\n */\nexport class recetasService {\n  /**\r\n   * Constructor del servicio que inyecta el HttpClient de Angular.\r\n   * @param http. Cliente HTTP utilizado para realizar solicitudes a una API REST.\r\n   */\n  constructor(http) {\n    this.http = http;\n  }\n  /**\r\n   * Método para la conexión con el método del backend para obtener Recetas\r\n   *\r\n   * Según el párametro que recibamos modificamos la consulta que se hace al back asignando su correspondiente declaración\r\n   *\r\n   * @param {string} recetasAMostrar. Recibimos el valor para el filtro de mostrar recetas por categoría.\r\n   * @param {number} idIngredientes. Recibimos el array con los Id de los ingredientes de la receta para el filtro por ingredientes.\r\n   * @param {number} idUsuario. Recibimos el id del Usuario para el filtro de las recetas subidas por el usuario.\r\n   * @param {string} ordenacion. Recibimos el valor del párametro para el filtro de recetas según su ordenación.\r\n   * @returns {Receta}  Devolvemos un array de las recetas obtenidas según lo requerido.\r\n   */\n  obtenerTodos(recetasAMostrar, idIngredientes, idUsuario, ordenacion) {\n    let param = '';\n    if (recetasAMostrar != null) {\n      param += 'categoria=' + recetasAMostrar;\n    }\n    if (idIngredientes != null && param != '') {\n      param += '&idIngredientes=' + idIngredientes.map(ingrediente => ingrediente.idIngredientes).join(',');\n    } else if (idIngredientes != null && param == '') {\n      param += 'idIngredientes=' + idIngredientes.map(ingrediente => ingrediente.idIngredientes).join(',');\n    }\n    if (idUsuario != null && param != '') {\n      param += '&idUsuario=' + idUsuario;\n    } else if (idUsuario != null && param == '') {\n      param += 'idUsuario=' + idUsuario;\n    }\n    if (ordenacion != null && param != '') {\n      param += '&ordenacion=' + ordenacion;\n    } else if (ordenacion != null && param == '') {\n      param += 'ordenacion=' + ordenacion;\n    }\n    return this.http.get('http://localhost:8081/recetas?' + param);\n  }\n  /**\r\n   * Método para la conexión con el método del backend para obtener Receta por su id,\r\n   *\r\n   * Realizamos la petición http al método obtener del back pasandole el id de la receta\r\n   *\r\n   * @param id. Recibimos el id de la receta que queremos mostrar.\r\n   * @returns Devolvemos el objeto receta que recibimos del backend\r\n   */\n  obtener(id) {\n    return this.http.get('http://localhost:8081/recetas/' + id);\n  }\n  /**\r\n   * Método para la conexion con el front y obtener los favoritos de un Usuario\r\n   * @param idRecetas. Recibimos un array con los id de las recetas que el usuario tiene como favoritos\r\n   * @returns Devuelve una lista de las recetas con los ids que le hemos mandado\r\n   */\n  obtenerFavoritos(idRecetas) {\n    let i = 0;\n    let params = '';\n    for (i; i < idRecetas.length; i++) {\n      if (i == 0) {\n        params = 'idRecetas=' + idRecetas[0];\n      } else {\n        params += '&idRecetas=' + idRecetas[i];\n      }\n      if (i === idRecetas.length - 1) {}\n    }\n    return this.http.get('http://localhost:8081/recetas/recetasFavoritos?' + params);\n  }\n  /**\r\n   * Método para la conexión con el backend\r\n   * para insertar una receta en la base de datos\r\n   * @param receta. Recibimos la receta\r\n   * @returns\r\n   */\n  subirReceta(receta) {\n    return this.http.post('http://localhost:8081/recetas', receta);\n  }\n  /**\r\n   * Método para la conexión con el backend y obtener  todos los ingredientes\r\n   *\r\n   * o los ingredientes según su tipo\r\n   * @param tipo. Recibimos el tipo de los ingredientes que queremos obtener o la variable vacia para obtener todos\r\n   * @returns Recibimos una lista de ingredientes\r\n   */\n  obtenerTodosIngredientes(tipo) {\n    let param = '';\n    if (tipo != null) {\n      param = '?tipo=' + tipo;\n    }\n    return this.http.get('http://localhost:8081/ingredientes' + param);\n  }\n  /**\r\n   * Método para la conexión con el back para añadir una valoración a la receta\r\n   * @param valoracion. Recibimos el objeto valoracion con la valoracion hecha por el usuario\r\n   * @returns nos devuelve la valoración\r\n   */\n  anyadirValoracion(valoracion) {\n    return this.http.post('http://localhost:8081/valoraciones', valoracion);\n  }\n  /**\r\n   * Método para la conexion con el back para añadir una receta como favorito a un Uusario\r\n   * @param favorito Recibimos los datos del Favorito con la receta y el usuario que la guarda\r\n   * @returns\r\n   */\n  agregarFavorito(favorito) {\n    console.log(favorito);\n    return this.http.post('http://localhost:8081/favoritos', favorito);\n  }\n}\nrecetasService.ɵfac = function recetasService_Factory(t) {\n  return new (t || recetasService)(i0.ɵɵinject(i1.HttpClient));\n};\nrecetasService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: recetasService,\n  factory: recetasService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["recetasService","constructor","http","obtenerTodos","recetasAMostrar","idIngredientes","idUsuario","ordenacion","param","map","ingrediente","join","get","obtener","id","obtenerFavoritos","idRecetas","i","params","length","subirReceta","receta","post","obtenerTodosIngredientes","tipo","anyadirValoracion","valoracion","agregarFavorito","favorito","console","log","factory"],"sourceRoot":"","sources":["C:\\Users\\L\\Desktop\\helpcook-master\\helpcook-master\\src\\app\\pages\\mostrar-recetas\\recetasService.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Ingredientes } from '../../Ingredientes.model';\nimport { Receta } from 'src/app/Receta.model';\nimport { RecetasRequest } from 'src/app/RecetasRequest.model';\nimport { Valoraciones } from 'src/app/Valoraciones.model';\nimport { Favoritos } from 'src/app/Favoritos.model';\n\n\n/**\n * Servicio que proporciona acceso a la API REST utilizando el HttpClient de Angular\n * \n * Utilizado para las consultas de recetas.\n */\n@Injectable()\nexport class recetasService {\n\n\n  /**\n   * Constructor del servicio que inyecta el HttpClient de Angular.\n   * @param http. Cliente HTTP utilizado para realizar solicitudes a una API REST.\n   */\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Método para la conexión con el método del backend para obtener Recetas\n   * \n   * Según el párametro que recibamos modificamos la consulta que se hace al back asignando su correspondiente declaración \n   * \n   * @param {string} recetasAMostrar. Recibimos el valor para el filtro de mostrar recetas por categoría.\n   * @param {number} idIngredientes. Recibimos el array con los Id de los ingredientes de la receta para el filtro por ingredientes. \n   * @param {number} idUsuario. Recibimos el id del Usuario para el filtro de las recetas subidas por el usuario.\n   * @param {string} ordenacion. Recibimos el valor del párametro para el filtro de recetas según su ordenación.\n   * @returns {Receta}  Devolvemos un array de las recetas obtenidas según lo requerido.\n   */\n  obtenerTodos(\n    recetasAMostrar: string,\n    idIngredientes: Ingredientes[],\n    idUsuario: number, \n    ordenacion: string\n  ): Observable<Receta[]> {\n    let param = '';\n \n    if (recetasAMostrar != null) {\n      param += 'categoria=' + recetasAMostrar;\n    }\n    if (idIngredientes != null && param != '') {\n      param += '&idIngredientes=' + idIngredientes.map(ingrediente => ingrediente.idIngredientes).join(',');\n    } else if (idIngredientes != null && param == '') {\n      param += 'idIngredientes=' + idIngredientes.map(ingrediente => ingrediente.idIngredientes).join(',');\n    }\n\n    if (idUsuario != null && param != '') {\n      param += '&idUsuario=' + idUsuario;\n    } else if(idUsuario != null && param == '') {\n      param += 'idUsuario=' + idUsuario;\n    }\n    if (ordenacion != null && param != '') {\n      param += '&ordenacion=' + ordenacion;\n    } else if(ordenacion != null && param == '') {\n      param += 'ordenacion=' + ordenacion;\n    }\n    \n    return this.http.get<Receta[]>('http://localhost:8081/recetas?' + param);\n  }\n\n\n  /**\n   * Método para la conexión con el método del backend para obtener Receta por su id,\n   * \n   * Realizamos la petición http al método obtener del back pasandole el id de la receta\n   * \n   * @param id. Recibimos el id de la receta que queremos mostrar.\n   * @returns Devolvemos el objeto receta que recibimos del backend\n   */\n  obtener(id:number){\n    \n    return this.http.get<Receta>('http://localhost:8081/recetas/' + id);\n\n  }\n\n\n  /**\n   * Método para la conexion con el front y obtener los favoritos de un Usuario\n   * @param idRecetas. Recibimos un array con los id de las recetas que el usuario tiene como favoritos\n   * @returns Devuelve una lista de las recetas con los ids que le hemos mandado\n   */\n  obtenerFavoritos(idRecetas: number[]): Observable<Receta[]> {\n\n    let i:number = 0;\n    let params = '';\n\n    for(i;i<idRecetas.length;i++){\n      if(i==0){\n        params = 'idRecetas='+ idRecetas[0];\n      }else{\n        params += '&idRecetas='+idRecetas[i];\n      }\n      if(i === idRecetas.length - 1) {\n      }\n    }\n    \n    return this.http.get<any>('http://localhost:8081/recetas/recetasFavoritos?'+ params );\n  }\n\n\n  /**\n   * Método para la conexión con el backend\n   * para insertar una receta en la base de datos\n   * @param receta. Recibimos la receta\n   * @returns \n   */\n  subirReceta(receta:RecetasRequest){\n\n    return this.http.post('http://localhost:8081/recetas', receta);\n\n  }\n\n  /**\n   * Método para la conexión con el backend y obtener  todos los ingredientes \n   * \n   * o los ingredientes según su tipo\n   * @param tipo. Recibimos el tipo de los ingredientes que queremos obtener o la variable vacia para obtener todos\n   * @returns Recibimos una lista de ingredientes\n   */\n  obtenerTodosIngredientes(tipo:string) {\n\n    let param = '';\n    if(tipo!=null){\n      param = '?tipo='+ tipo;\n    }\n    \n    return this.http.get<Ingredientes[]>('http://localhost:8081/ingredientes'+param);\n}\n\n/**\n * Método para la conexión con el back para añadir una valoración a la receta\n * @param valoracion. Recibimos el objeto valoracion con la valoracion hecha por el usuario \n * @returns nos devuelve la valoración\n */\nanyadirValoracion(valoracion:Valoraciones){\n\n  return this.http.post('http://localhost:8081/valoraciones', valoracion);\n}\n\n/**\n * Método para la conexion con el back para añadir una receta como favorito a un Uusario\n * @param favorito Recibimos los datos del Favorito con la receta y el usuario que la guarda\n * @returns \n */\nagregarFavorito(favorito: Favoritos){\n\n  console.log(favorito);\n  return this.http.post('http://localhost:8081/favoritos', favorito);\n}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}