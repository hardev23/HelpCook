{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/**\r\n * Servicio que proporciona acceso a la API REST utilizando el HttpClient de Angular\r\n *\r\n * Utilizado para las consultas de usuarios.\r\n */\nexport class RegistroService {\n  /**\r\n       * Constructor del servicio que inyecta el HttpClient de Angular.\r\n       * @param http. Cliente HTTP utilizado para realizar solicitudes a una API REST.\r\n       */\n  constructor(http) {\n    this.http = http;\n  }\n  /**\r\n   * Método para la conexión con el método del backend para crear un Usuario,\r\n   * @param users. Recibimos el objeto usuario con los datos rellenados por éste\r\n   * @returns Devolvemos el usuario ya guardado en la BBDD\r\n   */\n  addNewUser(users) {\n    return this.http.post('http://localhost:8081/usuarios', users);\n  }\n  /**\r\n   * Método para la conexión con el backend para obtener al usuario por su email y contrasenia\r\n   * @param email. Recibimos la variable email\r\n   * @param contrasenia. Recibimos la variable contrasenia\r\n   * @returns\r\n   */\n  login(email, contrasenia) {\n    let params = 'email=' + email + '&contrasenia=' + contrasenia;\n    return this.http.get('http://localhost:8081/usuarios/login?' + params);\n  }\n  /**\r\n   * Método para devolver el Usuario\r\n   * @param user Recibimos el Usuario\r\n   */\n  setCurrentUser(user) {\n    this.currentUser = user;\n  }\n  /**\r\n   * Método para capturar el usuario\r\n   * @returns Devolvemos el Usuario\r\n   */\n  getCurrentUser() {\n    return this.currentUser;\n  }\n  /**\r\n   * Método para la conexión con el backend para la actualización de los datos de un Usuario\r\n   * @param users Recibimos el usuario modificado\r\n   * @param idUsuarios Recibimos el id del usuario que se va a modificar\r\n   * @returns Devolvemos el usuario ya modificado\r\n   */\n  updateUser(users, idUsuarios) {\n    const url = `http://localhost:8081/usuarios/${idUsuarios}`;\n    return this.http.put(url, users);\n  }\n}\nRegistroService.ɵfac = function RegistroService_Factory(t) {\n  return new (t || RegistroService)(i0.ɵɵinject(i1.HttpClient));\n};\nRegistroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RegistroService,\n  factory: RegistroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA;;;;;AAQA,OAAM,MAAOA,eAAe;EAQ1B;;;;EAIAC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAGvC;;;;;EAKAC,UAAU,CAACC,KAAe;IACtB,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,gCAAgC,EAAED,KAAK,CAAC;EAClE;EAIA;;;;;;EAMAE,KAAK,CAACC,KAAa,EAAEC,WAAmB;IAErC,IAAIC,MAAM,GAAG,QAAQ,GAACF,KAAK,GAAC,eAAe,GAACC,WAAW;IAExD,OAAO,IAAI,CAACN,IAAI,CAACQ,GAAG,CAAW,uCAAuC,GAAED,MAAM,CAAC;EAGjF;EAGF;;;;EAIEE,cAAc,CAACC,IAAc;IAC3B,IAAI,CAACC,WAAW,GAAGD,IAAI;EACzB;EAEA;;;;EAIAE,cAAc;IACZ,OAAO,IAAI,CAACD,WAAW;EACzB;EAEF;;;;;;EAMEE,UAAU,CAACX,KAAe,EAACY,UAAiB;IAE1C,MAAMC,GAAG,GAAG,kCAAkCD,UAAU,EAAE;IAC1D,OAAO,IAAI,CAACd,IAAI,CAACgB,GAAG,CAAWD,GAAG,EAAEb,KAAK,CAAC;EAE5C;;AArEWJ,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAmB,SAAfnB,eAAe;EAAAoB,YAFd;AAAM","names":["RegistroService","constructor","http","addNewUser","users","post","login","email","contrasenia","params","get","setCurrentUser","user","currentUser","getCurrentUser","updateUser","idUsuarios","url","put","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\L\\Desktop\\helpcook-master\\helpcook-master\\src\\app\\pages\\registro\\registro-service.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Usuarios } from 'src/app/Usuarios.model';\n\n\n/**\n * Servicio que proporciona acceso a la API REST utilizando el HttpClient de Angular\n * \n * Utilizado para las consultas de usuarios.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegistroService{\n\n/**\n * Variable para almacenar Usuario\n */\n  private currentUser: Usuarios;\n\n\n  /**\n       * Constructor del servicio que inyecta el HttpClient de Angular.\n       * @param http. Cliente HTTP utilizado para realizar solicitudes a una API REST.\n       */\n  constructor(private http: HttpClient) {}\n\n\n  /**\n   * Método para la conexión con el método del backend para crear un Usuario,\n   * @param users. Recibimos el objeto usuario con los datos rellenados por éste\n   * @returns Devolvemos el usuario ya guardado en la BBDD\n   */\n  addNewUser(users: Usuarios){\n      return this.http.post('http://localhost:8081/usuarios', users);\n  }\n\n \n\n  /**\n   * Método para la conexión con el backend para obtener al usuario por su email y contrasenia\n   * @param email. Recibimos la variable email\n   * @param contrasenia. Recibimos la variable contrasenia \n   * @returns \n   */\n  login(email: string, contrasenia: string): Observable<Usuarios>{\n     \n     let params = 'email='+email+'&contrasenia='+contrasenia;\n     \n    return this.http.get<Usuarios>('http://localhost:8081/usuarios/login?'+ params);\n      \n    \n  }\n  \n  \n/**\n * Método para devolver el Usuario\n * @param user Recibimos el Usuario\n */\n  setCurrentUser(user: Usuarios) {\n    this.currentUser = user;\n  }\n\n  /**\n   * Método para capturar el usuario\n   * @returns Devolvemos el Usuario\n   */\n  getCurrentUser() {\n    return this.currentUser;\n  }\n\n/**\n * Método para la conexión con el backend para la actualización de los datos de un Usuario\n * @param users Recibimos el usuario modificado\n * @param idUsuarios Recibimos el id del usuario que se va a modificar\n * @returns Devolvemos el usuario ya modificado\n */\n  updateUser(users: Usuarios,idUsuarios:number){\n\n    const url = `http://localhost:8081/usuarios/${idUsuarios}`;\n    return this.http.put<Usuarios>(url, users);\n\n  }\n    \n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}